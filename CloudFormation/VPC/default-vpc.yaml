AWSTemplateFormatVersion: '2010-09-09'
Description: "This template creates a Multi-AZ, multi-subnet VPC infrastructure with managed two NAT gateways in the public subnet."
Metadata:
    'AWS::CloudFormation::Interface':
        ParameterGroups:
            - 
                Label:
                    default: Availability Zone Configuration
                Parameters:
                    - AvailabilityZones
                    - NumberOfAZs
            - 
                Label:
                    default: Network Configuration
                Parameters:
                    - VPCCIDR
                    - PublicSubnet1CIDR
                    - PublicSubnet2CIDR
                    - PublicSubnet3CIDR
                    - PublicSubnet4CIDR
                    - CreatePrivateSubnets
                    - PrivateSubnet1CIDR
                    - PrivateSubnet2CIDR
                    - PrivateSubnet3CIDR
                    - PrivateSubnet4CIDR
                    - CreateDBPrivateSubnets
                    - PrivateSubnet1DBCIDR
                    - PrivateSubnet2DBCIDR
                    - PrivateSubnet3DBCIDR
                    - PrivateSubnet4DBCIDR
        ParameterLabels:
            AvailabilityZones:
                default: Availability Zones
            CreateDBPrivateSubnets:
                default: Create DB private subnets
            CreatePrivateSubnets:
                default: Create private subnets
            NumberOfAZs:
                default: Number of Availability Zones
            PrivateSubnet1CIDR:
                default: Private subnet 1 CIDR
            PrivateSubnet1DBCIDR:
                default: Private subnet 1 DB with dedicated network ACL CIDR
            PrivateSubnet2CIDR:
                default: Private subnet 2 CIDR
            PrivateSubnet2DBCIDR:
                default: Private subnet 2 DB with dedicated network ACL CIDR
            PrivateSubnet3CIDR:
                default: Private subnet 3 CIDR
            PrivateSubnet3DBCIDR:
                default: Private subnet 3 DB with dedicated network ACL CIDR
            PrivateSubnet4CIDR:
                default: Private subnet 4 CIDR
            PrivateSubnet4DBCIDR:
                default: Private subnet 4 DB with dedicated network ACL CIDR
            PublicSubnet1CIDR:
                default: Public subnet 1 CIDR
            PublicSubnet2CIDR:
                default: Public subnet 2 CIDR
            PublicSubnet3CIDR:
                default: Public subnet 3 CIDR
            PublicSubnet4CIDR:
                default: Public subnet 4 CIDR
            VPCCIDR:
                default: VPC CIDR
Parameters:
    AvailabilityZones:
        Description: 'List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.'
        Type: 'List<AWS::EC2::AvailabilityZone::Name>'
    CreateDBPrivateSubnets:
        AllowedValues:
            - 'true'
            - 'false'
        Default: 'true'
        Description: "Set to true to create a network ACL protected subnet in each Availability Zone. If false, the CIDR parameters for those subnets will be ignored. If true, it also requires that the 'Create private subnets' parameter is also true to have any effect."
        Type: String
    CreatePrivateSubnets:
        AllowedValues:
            - 'true'
            - 'false'
        Default: 'true'
        Description: 'Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.'
        Type: String
    NumberOfAZs:
        AllowedValues:
            - '2'
            - '3'
            - '4'
        Default: '2'
        Description: Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter.
        Type: String
    PrivateSubnet1CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.0.0/19
        Description: CIDR block for private subnet 1 located in Availability Zone 1
        Type: String
    PrivateSubnet1DBCIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.192.0/21
        Description: CIDR block for private subnet 1DB with dedicated network ACL located in Availability Zone 1
        Type: String
    PrivateSubnet2CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.32.0/19
        Description: CIDR block for private subnet 2 located in Availability Zone 2
        Type: String
    PrivateSubnet2DBCIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.200.0/21
        Description: CIDR block for private subnet 2DB with dedicated network ACL located in Availability Zone 2
        Type: String
    PrivateSubnet3CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.64.0/19
        Description: CIDR block for private subnet 3 located in Availability Zone 3
        Type: String
    PrivateSubnet3DBCIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.208.0/21
        Description: CIDR block for private subnet 3DB with dedicated network ACL located in Availability Zone 3
        Type: String
    PrivateSubnet4CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.96.0/19
        Description: CIDR block for private subnet 4 located in Availability Zone 4
        Type: String
    PrivateSubnet4DBCIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.216.0/21
        Description: CIDR block for private subnet 4DB with dedicated network ACL located in Availability Zone 4
        Type: String    
    PublicSubnet1CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.128.0/20
        Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
        Type: String
    PublicSubnet2CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.144.0/20
        Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2
        Type: String
    PublicSubnet3CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.160.0/20
        Description: CIDR block for the public DMZ subnet 3 located in Availability Zone 3
        Type: String
    PublicSubnet4CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.176.0/20
        Description: CIDR block for the public DMZ subnet 4 located in Availability Zone 4
        Type: String
    VPCCIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.0.0/16
        Description: CIDR block for the VPC
        Type: String
Conditions:
    3AZCondition:
        'Fn::Or':
            - 
                'Fn::Equals':
                    - 
                        Ref: NumberOfAZs
                    - '3'
            - 
                Condition: 4AZCondition
    4AZCondition:
        'Fn::Equals':
            - 
                Ref: NumberOfAZs
            - '4'
    DBPrivateSubnetsCondition:
        'Fn::And':
            - 
                'Fn::Equals':
                    - 
                        Ref: CreatePrivateSubnets
                    - 'true'
            - 
                'Fn::Equals':
                    - 
                        Ref: CreateDBPrivateSubnets
                    - 'true'
    'DBPrivateSubnets&3AZCondition':
        'Fn::And':
            - 
                Condition: DBPrivateSubnetsCondition
            - 
                Condition: 3AZCondition
    'DBPrivateSubnets&4AZCondition':
        'Fn::And':
            - 
                Condition: DBPrivateSubnetsCondition
            - 
                Condition: 4AZCondition
    NVirginiaRegionCondition:
        'Fn::Equals':
            - 
                Ref: 'AWS::Region'
            - us-east-1
    PrivateSubnetsCondition:
        'Fn::Equals':
            - 
                Ref: CreatePrivateSubnets
            - 'true'
    'PrivateSubnets&3AZCondition':
        'Fn::And':
            - 
                Condition: PrivateSubnetsCondition
            - 
                Condition: 3AZCondition
    'PrivateSubnets&4AZCondition':
        'Fn::And':
            - 
                Condition: PrivateSubnetsCondition
            - 
                Condition: 4AZCondition
Resources:
    DHCPOptions:
        Type: 'AWS::EC2::DHCPOptions'
        Properties:
            DomainName:
                'Fn::If':
                    - NVirginiaRegionCondition
                    - ec2.internal
                    - 
                        'Fn::Sub': '${AWS::Region}.compute.internal'
            DomainNameServers:
                - AmazonProvidedDNS
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock:
                Ref: VPCCIDR            
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - 
                    Key: Name
                    Value:
                        Ref: 'AWS::StackName'
    VPCDHCPOptionsAssociation:
        Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
        Properties:
            VpcId:
                Ref: VPC
            DhcpOptionsId:
                Ref: DHCPOptions
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - 
                    Key: Name
                    Value:
                        Ref: 'AWS::StackName'
    VPCGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            VpcId:
                Ref: VPC
            InternetGatewayId:
                Ref: InternetGateway
    PrivateSubnet1:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet1CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '0'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 1
    PrivateSubnet1DB:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet1DBCIDR
            AvailabilityZone:
                'Fn::Select':
                    - '0'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 1DB
    PrivateSubnet2:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet2CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '1'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 2
    PrivateSubnet2DB:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet2DBCIDR
            AvailabilityZone:
                'Fn::Select':
                    - '1'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 2DB
    PrivateSubnet3:
        Condition: 'PrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet3CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '2'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 3
    PrivateSubnet3DB:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet3DBCIDR
            AvailabilityZone:
                'Fn::Select':
                    - '2'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 3DB
    PrivateSubnet4:
        Condition: 'PrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet4CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '3'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 4
    PrivateSubnet4DB:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PrivateSubnet4DBCIDR
            AvailabilityZone:
                'Fn::Select':
                    - '3'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 4DB
    PublicSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PublicSubnet1CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '0'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 1
            MapPublicIpOnLaunch: true
    PublicSubnet2:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PublicSubnet2CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '1'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 2
            MapPublicIpOnLaunch: true
    PublicSubnet3:
        Condition: 3AZCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PublicSubnet3CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '2'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 3
            MapPublicIpOnLaunch: true
    PublicSubnet4:
        Condition: 4AZCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                Ref: VPC
            CidrBlock:
                Ref: PublicSubnet4CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '3'
                    - 
                        Ref: AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 4
            MapPublicIpOnLaunch: true
    PrivateSubnet1RouteTable:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 1
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet1Route:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet1RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway1
    PrivateSubnet1RouteTableAssociation:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet1
            RouteTableId:
                Ref: PrivateSubnet1RouteTable
    PrivateSubnet2RouteTable:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 2
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet2Route:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet2RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway2
    PrivateSubnet2RouteTableAssociation:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet2
            RouteTableId:
                Ref: PrivateSubnet2RouteTable
    PrivateSubnet3RouteTable:
        Condition: 'PrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 3
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet3Route:
        Condition: 'PrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet3RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway1
    PrivateSubnet3RouteTableAssociation:
        Condition: 'PrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet3
            RouteTableId:
                Ref: PrivateSubnet3RouteTable
    PrivateSubnet4RouteTable:
        Condition: 'PrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 4
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet4Route:
        Condition: 'PrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet4RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway2
    PrivateSubnet4RouteTableAssociation:
        Condition: 'PrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet4
            RouteTableId:
                Ref: PrivateSubnet4RouteTable
    PrivateSubnet1DBRouteTable:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 1 DB
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet1DBRoute:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet1DBRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway1
    PrivateSubnet1DBRouteTableAssociation:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet1DB
            RouteTableId:
                Ref: PrivateSubnet1DBRouteTable
    PrivateSubnet1DBNetworkAcl:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::NetworkAcl'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: NACL Protected subnet 1 DB
                - 
                    Key: Network
                    Value: NACL Protected
    PrivateSubnet1DBNetworkAclEntryInbound:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: false
            NetworkAclId:
                Ref: PrivateSubnet1DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet1DBNetworkAclEntryOutbound:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: true
            NetworkAclId:
                Ref: PrivateSubnet1DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet1DBNetworkAclAssociation:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::SubnetNetworkAclAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet1DB
            NetworkAclId:
                Ref: PrivateSubnet1DBNetworkAcl
    PrivateSubnet2DBRouteTable:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 2 DB
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet2DBRoute:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet2DBRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway2
    PrivateSubnet2DBRouteTableAssociation:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet2DB
            RouteTableId:
                Ref: PrivateSubnet2DBRouteTable
    PrivateSubnet2DBNetworkAcl:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::NetworkAcl'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: NACL Protected subnet 2 DB
                - 
                    Key: Network
                    Value: NACL Protected
    PrivateSubnet2DBNetworkAclEntryInbound:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: false
            NetworkAclId:
                Ref: PrivateSubnet2DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet2DBNetworkAclEntryOutbound:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: true
            NetworkAclId:
                Ref: PrivateSubnet2DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet2DBNetworkAclAssociation:
        Condition: DBPrivateSubnetsCondition
        Type: 'AWS::EC2::SubnetNetworkAclAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet2DB
            NetworkAclId:
                Ref: PrivateSubnet2DBNetworkAcl
    PrivateSubnet3DBRouteTable:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 3 DB
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet3DBRoute:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet3DBRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway1
    PrivateSubnet3DBRouteTableAssociation:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet3DB
            RouteTableId:
                Ref: PrivateSubnet3DBRouteTable
    PrivateSubnet3DBNetworkAcl:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::NetworkAcl'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: NACL Protected subnet 3 DB
                - 
                    Key: Network
                    Value: NACL Protected
    PrivateSubnet3DBNetworkAclEntryInbound:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: false
            NetworkAclId:
                Ref: PrivateSubnet3DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet3DBNetworkAclEntryOutbound:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: true
            NetworkAclId:
                Ref: PrivateSubnet3DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet3DBNetworkAclAssociation:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Type: 'AWS::EC2::SubnetNetworkAclAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet3DB
            NetworkAclId:
                Ref: PrivateSubnet3DBNetworkAcl
    PrivateSubnet4DBRouteTable:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 4 DB
                - 
                    Key: Network
                    Value: Private
    PrivateSubnet4DBRoute:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PrivateSubnet4DBRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NATGateway2
    PrivateSubnet4DBRouteTableAssociation:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet4DB
            RouteTableId:
                Ref: PrivateSubnet4DBRouteTable
    PrivateSubnet4DBNetworkAcl:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::NetworkAcl'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: NACL Protected subnet 4 DB
                - 
                    Key: Network
                    Value: NACL Protected
    PrivateSubnet4DBNetworkAclEntryInbound:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: false
            NetworkAclId:
                Ref: PrivateSubnet4DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet4DBNetworkAclEntryOutbound:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::NetworkAclEntry'
        Properties:
            CidrBlock: 0.0.0.0/0
            Egress: true
            NetworkAclId:
                Ref: PrivateSubnet4DBNetworkAcl
            Protocol: -1
            RuleAction: allow
            RuleNumber: 100
    PrivateSubnet4DBNetworkAclAssociation:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Type: 'AWS::EC2::SubnetNetworkAclAssociation'
        Properties:
            SubnetId:
                Ref: PrivateSubnet4DB
            NetworkAclId:
                Ref: PrivateSubnet4DBNetworkAcl
    PublicSubnetRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - 
                    Key: Name
                    Value: Public Subnets
                - 
                    Key: Network
                    Value: Public
    PublicSubnetRoute:
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                Ref: PublicSubnetRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: InternetGateway
    PublicSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PublicSubnet1
            RouteTableId:
                Ref: PublicSubnetRouteTable
    PublicSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PublicSubnet2
            RouteTableId:
                Ref: PublicSubnetRouteTable
    PublicSubnet3RouteTableAssociation:
        Condition: 3AZCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PublicSubnet3
            RouteTableId:
                Ref: PublicSubnetRouteTable
    PublicSubnet4RouteTableAssociation:
        Condition: 4AZCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                Ref: PublicSubnet4
            RouteTableId:
                Ref: PublicSubnetRouteTable
    NAT1EIP:
        Condition: PrivateSubnetsCondition
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
    NAT2EIP:
        Condition: PrivateSubnetsCondition
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
    NATGateway1:
        Condition: PrivateSubnetsCondition
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                'Fn::GetAtt':
                    - NAT1EIP
                    - AllocationId
            SubnetId:
                Ref: PublicSubnet1
    NATGateway2:
        Condition: PrivateSubnetsCondition
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                'Fn::GetAtt':
                    - NAT2EIP
                    - AllocationId
            SubnetId:
                Ref: PublicSubnet2
    S3VPCEndpoint:
        Condition: PrivateSubnetsCondition
        Type: 'AWS::EC2::VPCEndpoint'
        Properties:
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - 
                        Action: '*'
                        Effect: Allow
                        Resource: '*'
                        Principal: '*'
            RouteTableIds:
                - 
                    Ref: PrivateSubnet1RouteTable
                - 
                    Ref: PrivateSubnet2RouteTable
                - 
                    'Fn::If':
                        - 'PrivateSubnets&3AZCondition'
                        - 
                            Ref: PrivateSubnet3RouteTable
                        - 
                            Ref: 'AWS::NoValue'
                - 
                    'Fn::If':
                        - 'PrivateSubnets&4AZCondition'
                        - 
                            Ref: PrivateSubnet4RouteTable
                        - 
                            Ref: 'AWS::NoValue'
                - 
                    'Fn::If':
                        - DBPrivateSubnetsCondition
                        - 
                            Ref: PrivateSubnet1DBRouteTable
                        - 
                            Ref: 'AWS::NoValue'
                - 
                    'Fn::If':
                        - DBPrivateSubnetsCondition
                        - 
                            Ref: PrivateSubnet2DBRouteTable
                        - 
                            Ref: 'AWS::NoValue'
                - 
                    'Fn::If':
                        - 'DBPrivateSubnets&3AZCondition'
                        - 
                            Ref: PrivateSubnet3DBRouteTable
                        - 
                            Ref: 'AWS::NoValue'
                - 
                    'Fn::If':
                        - 'DBPrivateSubnets&4AZCondition'
                        - 
                            Ref: PrivateSubnet4DBRouteTable
                        - 
                            Ref: 'AWS::NoValue'
            ServiceName:
                'Fn::Sub': 'com.amazonaws.${AWS::Region}.s3'
            VpcId:
                Ref: VPC
Outputs:
    NAT1EIP:
        Condition: PrivateSubnetsCondition
        Description: NAT 1 IP address
        Value:
            Ref: NAT1EIP
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-NAT1EIP'
    NAT2EIP:
        Condition: PrivateSubnetsCondition
        Description: NAT 2 IP address
        Value:
            Ref: NAT2EIP
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-NAT2EIP'
    NATGateway1ID:
        Condition: PrivateSubnetsCondition
        Description: NATGateway 1 ID
        Value:
            Ref: NATGateway1
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-NATGateway1'
    NATGateway2ID:
        Condition: PrivateSubnetsCondition
        Description: NATGateway 2 ID
        Value:
            Ref: NATGateway2
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-NATGateway2'
    PrivateSubnet1CIDR:
        Condition: PrivateSubnetsCondition
        Description: Private subnet 1 CIDR in Availability Zone 1
        Value:
            Ref: PrivateSubnet1CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet1CIDR'
    PrivateSubnet1ID:
        Condition: PrivateSubnetsCondition
        Description: Private subnet 1 ID in Availability Zone 1
        Value:
            Ref: PrivateSubnet1
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet1ID'
    PrivateSubnet1DBCIDR:
        Condition: DBPrivateSubnetsCondition
        Description: Private subnet 1 DB CIDR in Availability Zone 1
        Value:
            Ref: PrivateSubnet1DBCIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet1DBCIDR'
    PrivateSubnet1DBID:
        Condition: DBPrivateSubnetsCondition
        Description: Private subnet 1 DB ID in Availability Zone 1
        Value:
            Ref: PrivateSubnet1DB
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet1DBID'
    PrivateSubnet2CIDR:
        Condition: PrivateSubnetsCondition
        Description: Private subnet 2 CIDR in Availability Zone 2
        Value:
            Ref: PrivateSubnet2CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet2CIDR'
    PrivateSubnet2ID:
        Condition: PrivateSubnetsCondition
        Description: Private subnet 2 ID in Availability Zone 2
        Value:
            Ref: PrivateSubnet2
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet2ID'
    PrivateSubnet2DBCIDR:
        Condition: DBPrivateSubnetsCondition
        Description: Private subnet 2 DB CIDR in Availability Zone 2
        Value:
            Ref: PrivateSubnet2DBCIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet2DBCIDR'
    PrivateSubnet2DBID:
        Condition: DBPrivateSubnetsCondition
        Description: Private subnet 2 DB ID in Availability Zone 2
        Value:
            Ref: PrivateSubnet2DB
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet2DBID'
    PrivateSubnet3CIDR:
        Condition: 'PrivateSubnets&3AZCondition'
        Description: Private subnet 3 CIDR in Availability Zone 3
        Value:
            Ref: PrivateSubnet3CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet3CIDR'
    PrivateSubnet3ID:
        Condition: 'PrivateSubnets&3AZCondition'
        Description: Private subnet 3 ID in Availability Zone 3
        Value:
            Ref: PrivateSubnet3
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet3ID'
    PrivateSubnet3DBCIDR:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Description: Private subnet 3 DB CIDR in Availability Zone 3 
        Value:
            Ref: PrivateSubnet3DBCIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet3DBCIDR'
    PrivateSubnet3DBID:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Description: Private subnet 3 DB ID in Availability Zone 3 
        Value:
            Ref: PrivateSubnet3DB
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet3DBID'
    PrivateSubnet4CIDR:
        Condition: 'PrivateSubnets&4AZCondition'
        Description: Private subnet 4 CIDR in Availability Zone 4
        Value:
            Ref: PrivateSubnet4CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet4CIDR'
    PrivateSubnet4ID:
        Condition: 'PrivateSubnets&4AZCondition'
        Description: Private subnet 4 ID in Availability Zone 4
        Value:
            Ref: PrivateSubnet4
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet4ID'
    PrivateSubnet4DBCIDR:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Description: Private subnet 4 DB CIDR in Availability Zone 4
        Value:
            Ref: PrivateSubnet4DBCIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet4DBCIDR'
    PrivateSubnet4DBID:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Description: Private subnet 4 DB ID in Availability Zone 4
        Value:
            Ref: PrivateSubnet4DB
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet4DBID'
    PublicSubnet1CIDR:
        Description: Public subnet 1 CIDR in Availability Zone 1
        Value:
            Ref: PublicSubnet1CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet1CIDR'
    PublicSubnet1ID:
        Description: Public subnet 1 ID in Availability Zone 1
        Value:
            Ref: PublicSubnet1
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet1ID'
    PublicSubnet2CIDR:
        Description: Public subnet 2 CIDR in Availability Zone 2
        Value:
            Ref: PublicSubnet2CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet2CIDR'
    PublicSubnet2ID:
        Description: Public subnet 2 ID in Availability Zone 2
        Value:
            Ref: PublicSubnet2
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet2ID'
    PublicSubnet3CIDR:
        Condition: 3AZCondition
        Description: Public subnet 3 CIDR in Availability Zone 3
        Value:
            Ref: PublicSubnet3CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet3CIDR'
    PublicSubnet3ID:
        Condition: 3AZCondition
        Description: Public subnet 3 ID in Availability Zone 3
        Value:
            Ref: PublicSubnet3
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet3ID'
    PublicSubnet4CIDR:
        Condition: 4AZCondition
        Description: Public subnet 4 CIDR in Availability Zone 4
        Value:
            Ref: PublicSubnet4CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet4CIDR'
    PublicSubnet4ID:
        Condition: 4AZCondition
        Description: Public subnet 4 ID in Availability Zone 4
        Value:
            Ref: PublicSubnet4
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnet4ID'
    S3VPCEndpoint:
        Condition: PrivateSubnetsCondition
        Description: S3 VPC Endpoint
        Value:
            Ref: S3VPCEndpoint
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-S3VPCEndpoint'
    PrivateSubnet1RouteTable:
        Condition: PrivateSubnetsCondition
        Value:
            Ref: PrivateSubnet1RouteTable
        Description: Private subnet 1 route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet1RouteTable'
    PrivateSubnet1DBRouteTable:
        Condition: DBPrivateSubnetsCondition
        Value:
            Ref: PrivateSubnet1DBRouteTable
        Description: Private subnet 1DB route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet1DBRouteTable'
    PrivateSubnet2RouteTable:
        Condition: PrivateSubnetsCondition
        Value:
            Ref: PrivateSubnet2RouteTable
        Description: Private subnet 2 route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet2RouteTable'
    PrivateSubnet2DBRouteTable:
        Condition: DBPrivateSubnetsCondition
        Value:
            Ref: PrivateSubnet2DBRouteTable
        Description: Private subnet 2DB route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet2DBRouteTable'
    PrivateSubnet3RouteTable:
        Condition: 'PrivateSubnets&3AZCondition'
        Value:
            Ref: PrivateSubnet3RouteTable
        Description: Private subnet 3 route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet3RouteTable'
    PrivateSubnet3DBRouteTable:
        Condition: 'DBPrivateSubnets&3AZCondition'
        Value:
            Ref: PrivateSubnet3DBRouteTable
        Description: Private subnet 3DB route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet3DBRouteTable'
    PrivateSubnet4RouteTable:
        Condition: 'PrivateSubnets&4AZCondition'
        Value:
            Ref: PrivateSubnet4RouteTable
        Description: Private subnet 4 route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet4RouteTable'
    PrivateSubnet4DBRouteTable:
        Condition: 'DBPrivateSubnets&4AZCondition'
        Value:
            Ref: PrivateSubnet4DBRouteTable
        Description: Private subnet 4DB route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PrivateSubnet4DBRouteTable'
    PublicSubnetRouteTable:
        Value:
            Ref: PublicSubnetRouteTable
        Description: Public subnet route table
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-PublicSubnetRouteTable'
    VPCCIDR:
        Value:
            Ref: VPCCIDR
        Description: VPC CIDR
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-VPCCIDR'
    VPCID:
        Value:
            Ref: VPC
        Description: VPC ID
        Export:
            Name:
                'Fn::Sub': '${AWS::StackName}-VPCID'
